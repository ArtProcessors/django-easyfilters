====================
 Django EasyFilters
====================

ALPHA software! Not much works yet...

Overview
========

The aim is to make it really easy to add filters to a page showing a
queryset. The UI of the filters is links i.e. just click on links to add/remove
filters. The filters also show the counts of the number of objects that would be
returned with that filter applied, and do so efficiently.

For fields where the values are more like a continuum, the aim is to use
autogenerated, intelligent ranges. Dates will use something like the Django
admin's date_hierarchy feature.


Usage
=====

This is a simple library, it doesn't provide any templates, template tags,
models, or anything that means you need to put it in INSTALLED_APPS.

models.py::

    class Book(models.Model):
        name = models.CharField(max_length=100)
        binding = models.CharField(max_length=2, choices=BINDING_CHOICES)
        authors = models.ManyToManyField(Author)
        genre = models.ForeignKey(Genre)
        price = models.DecimalField(max_digits=6, decimal_places=2)
        date_published = models.DateField()


views.py::

    from django_easyfilters import FilterSet

    class BookFilterSet(FilterSet):
        fields = [
            'binding',
            'authors',
            'genre',
            'price',
            ]
        # The above field names can also be replaced with
        # FilterOption instances to provide more options, or
        # Filter instances to fully customize the behaviour.

        # Methods in FilterSet can be overridden
        # to customize the behaviour/appearance of the filters

    def booklist(request):
        books = Book.objects.all()
        # request is an optional parameter, for custom behaviour
        booksfilter = BookFilterSet(sermons, request.GET, request=request)
        # In template, replace 'books' with 'bookfilter.qs' to get filtered
        # queryset. You pass in booksfilter as well, to be able to render the
        # filters.
        return render(request, "booklist.html.html", {'booksfilter': booksfilter,
                                                      'books': booksfilter.qs})


Template (assuming use of django-pagination to add pagination):

    {% autopaginate books 20 %}

    <h1>Filters:</h1>
    {{ booksfilter }}

    {% paginate %}

    {% for book in books %}
       {# etc #}
    {% endfor %}


Development
===========

First, ensure the directory containing this README is on your Python path
(virtualenv recommended). Django is a required dependency.

To run the test suite, do::

   ./manage.py test django_easyfilters

To edit the test fixtures, you can edit the
django_easyfilters/tests/fixtures/*.json, or you can do it via an admin
interface:

First create an empty db:

   rm tests.db
   ./manage.py syncdb

Then load with current test fixture:

   ./manage.py loaddata django_easyfilters_tests

Then edit in admin at http://localhost:8000/admin/ ::

   ./manage.py runserver

Or from a Python shell.

Then dump data::

  ./manage.py dumpdata tests --format=json --indent=2 > django_easyfilters/tests/fixtures/django_easyfilters_tests.json
